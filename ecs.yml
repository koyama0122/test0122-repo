AWSTemplateFormatVersion: '2010-09-09'
Description: Create ECS

#-------------------------------------------------------#
# Parametersセクション
#-------------------------------------------------------#
Parameters:
  SystemName:
    Type: String
    Default: test0122
  AZ1A:
    Type: String
    Default: ap-northeast-1a
  AZ1C:
    Type: String
    Default: ap-northeast-1c
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1ACIDR:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet1CCIDR:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1ACIDR:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1CCIDR:
    Type: String
    Default: 10.0.3.0/24
  AllCIDR:
    Type: String
    Default: 0.0.0.0/0

#-------------------------------------------------------#
# Resourcesセクション
#-------------------------------------------------------#
Resources:
# -----------------------VPC-----------------------
  # Create VPC
  test0122Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-Vpc

# -----------------------InternetGateway-----------------------
  # Create InternetGateway it with VPC
  test0122InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-InternetGateway

  test0122InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref test0122InternetGateway
      VpcId: !Ref test0122Vpc

# -----------------------subnet-----------------------
  # Create public subnet
  test0122PublicSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ1A
      CidrBlock: !Ref PublicSubnet1ACIDR
      VpcId: !Ref test0122Vpc
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-PublicSubnet1a

  test0122PublicSubnet1C:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ1C
      CidrBlock: !Ref PublicSubnet1CCIDR
      VpcId: !Ref test0122Vpc
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-PublicSubnet1c

  # Create PrivateSubnet
  test0122PrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ1A
      CidrBlock: !Ref PrivateSubnet1ACIDR
      VpcId: !Ref test0122Vpc
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-PrivateSubnet1a

  test0122PrivateSubnet1C:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ1C
      CidrBlock: !Ref PrivateSubnet1CCIDR
      VpcId: !Ref test0122Vpc
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-PrivateSubnet1c

# -----------------------RouteTable-----------------------
  # Create Route Table public subnet
  test0122PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref test0122Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-Public-Subnet-RouteTable

  # PublicSubnetRouteTableAssociation
  test0122Public1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref test0122PublicRouteTable
      SubnetId: !Ref test0122PublicSubnet1A

  test0122Public1CRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref test0122PublicRouteTable
      SubnetId: !Ref test0122PublicSubnet1C

  # PublicRoute
  test0122PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: test0122InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: test0122PublicRouteTable
      DestinationCidrBlock: !Ref AllCIDR
      GatewayId:
        Ref: test0122InternetGateway

  # Create Route Table Private subnet 1A
  test0122PrivateRouteTable1A:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref test0122Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-Private-Subnet-1A-RouteTable

# Create Route Table Private subnet 1C
  test0122PrivateRouteTable1C:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref test0122Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-Private-Subnet-1C-RouteTable

  # PrivateSubnetRouteTableAssociation 1A
  test0122Private1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref test0122PrivateRouteTable1A
      SubnetId: !Ref test0122PrivateSubnet1A

  # PrivateSubnetRouteTableAssociation 1C
  test0122Private1CRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref test0122PrivateRouteTable1C
      SubnetId: !Ref test0122PrivateSubnet1C

  # PrivateRoute 1A
  test0122PrivateRoute1A:
    Type: AWS::EC2::Route
    DependsOn: test0122InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref test0122PrivateRouteTable1A
      DestinationCidrBlock: !Ref AllCIDR
      # ここでエンドポイントをターゲットにしたい

  # PrivateRoute 1C
  test0122PrivateRoute1C:
    Type: AWS::EC2::Route
    DependsOn: test0122InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref test0122PrivateRouteTable1C
      DestinationCidrBlock: !Ref AllCIDR
      # ここでエンドポイントをターゲットにしたい

# -----------------------Endpoint-----------------------
  # ECR API Endpoint
  test0122EcrApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !Ref test0122EPSecurityGroup
      ServiceName: com.amazonaws.ap-northeast-1.ecr.api
      VpcId: !Ref test0122Vpc
      SubnetIds:
        - !Ref test0122PrivateSubnet1A
        - !Ref test0122PrivateSubnet1C

  # ECR DKR Endpoint
  test0122EcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !Ref test0122EPSecurityGroup
      ServiceName: com.amazonaws.ap-northeast-1.ecr.dkr
      VpcId: !Ref test0122Vpc
      SubnetIds:
        - !Ref test0122PrivateSubnet1A
        - !Ref test0122PrivateSubnet1C

  # ECR S3 Endpoint
  test0122S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref test0122PrivateRouteTable1A
        - !Ref test0122PrivateRouteTable1C
      ServiceName: com.amazonaws.ap-northeast-1.s3
      VpcId: !Ref test0122Vpc

# -----------------------NetworkACL-----------------------
  # Create NetworkACL it with public subnet 1A
  test0122public1ANetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref test0122Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-PublicSubnet1A-NetworkACL

  # NetworkAclAssociation public subnet 1A
  test0122public1ANAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref test0122public1ANetworkAcl
      SubnetId: !Ref test0122PublicSubnet1A

  # NetworkAcl public subnet 1A Inbound Rules
  test0122Public1ANetworkAclInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref test0122public1ANetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref AllCIDR

  # NetworkAcl public subnet 1A Outbound Rules
  test0122Public1ANetworkAclOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref test0122public1ANetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref AllCIDR

  # Create NetworkACL it with public subnet 1C
  test0122public1CNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref test0122Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-PublicSubnet1C-NetworkACL
          
  # NetworkAclAssociation public subnet 1C
  test0122public1CNAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref test0122public1CNetworkAcl
      SubnetId: !Ref test0122PublicSubnet1C

  # NetworkAcl public subnet 1C Inbound Rules
  test0122Public1CNetworkAclInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref test0122public1CNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref AllCIDR

  # NetworkAcl public subnet 1C Outbound Rules
  test0122Public1CNetworkAclOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref test0122public1CNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref AllCIDR

  # Create NetworkACL it with private subnet 1A
  test0122private1ANetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref test0122Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-PrivateSubnet1A-NetworkACL

  # NetworkAclAssociation private subnet 1A
  test0122private1ANAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref test0122private1ANetworkAcl
      SubnetId: !Ref test0122PrivateSubnet1A

  # NetworkAcl private subnet 1A Inbound Rules
  test0122Private1ANetworkAclInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref test0122private1ANetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref AllCIDR

  # NetworkAcl private subnet 1A Outbound Rules
  test0122Private1ANetworkAclOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref test0122private1ANetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref AllCIDR

  # Create NetworkACL it with private subnet 1C
  test0122private1CNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref test0122Vpc
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-PrivateSubnet1C-NetworkACL

  # NetworkAclAssociation private subnet 1C
  test0122private1CNAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref test0122private1CNetworkAcl
      SubnetId: !Ref test0122PrivateSubnet1C

  # NetworkAcl private subnet 1C Inbound Rules
  test0122Private1CNetworkAclInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref test0122private1CNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: false
      RuleAction: allow
      CidrBlock: !Ref AllCIDR

  # NetworkAcl private subnet 1C Outbound Rules
  test0122Private1CNetworkAclOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref test0122private1CNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref AllCIDR

# -----------------------SecurityGroup-----------------------
# Create SecurityGroup for ALB
  test0122AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${SystemName}-Alb-SG
      GroupDescription: Allow port 80
      VpcId: !Ref test0122Vpc
      SecurityGroupIngress:
        - CidrIp: !Ref AllCIDR
          IpProtocol: 6
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-Alb-SG

  # Create SecurityGroup for ECS
  test0122EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${SystemName}-Ecs-SG
      GroupDescription: Security group for the service
      VpcId: !Ref test0122Vpc
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref test0122AlbSecurityGroup
          IpProtocol: 6
          FromPort: 80
          ToPort: 80       
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-Ecs-SG

  # Create SecurityGroup for Endpoint
  test0122EPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${SystemName}-EP-SG
      GroupDescription: Security group for the EP
      VpcId: !Ref test0122Vpc
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref  test0122EcsSecurityGroup
          IpProtocol: 6
          FromPort: 443
          ToPort: 443          
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-EP-SG

# -----------------------TargetGroup-----------------------
  # Create TargetGroup
  test0122TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref test0122Vpc
      Name: !Sub ${SystemName}-TargetGroup
      Protocol: HTTP
      Port: 80
      TargetType: ip

# -----------------------ALB-----------------------
  # Create ALB
  test0122ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${SystemName}-ALB
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-ALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      SecurityGroups:
        - !Ref test0122AlbSecurityGroup
      Subnets:
        - !Ref test0122PublicSubnet1A
        - !Ref test0122PublicSubnet1C

  # ALB Listener
  test0122ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref test0122TargetGroup
          Type: forward
      LoadBalancerArn: !Ref test0122ALB
      Port: 80
      Protocol: HTTP

# -----------------------ECS-----------------------
  # Create ECS Cluster
  test0122EcsCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Sub ${SystemName}-Ecs-Cluster
      Tags: 
        - Key: Name
          Value: !Sub ${SystemName}-Ecs-Cluster

  # Create ECS LogGroup
  test0122ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${SystemName}-Ecs-LogGroup

  # Create ECS Task Execution Role
  test0122ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${SystemName}-ECSTaskExecutionRolePolicy
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # ECS Task Definition
  test0122ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      ExecutionRoleArn: !Ref test0122ECSTaskExecutionRole
      Family: !Sub ${SystemName}-Ecs-Task
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Sub ${SystemName}-Container
          Image: userID.dkr.ecr.ap-northeast-1.amazonaws.com/test0122-ecr-repository:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref test0122ECSLogGroup
              awslogs-region: ap-northeast-1
              awslogs-stream-prefix: !Ref SystemName
          MemoryReservation: 128
          PortMappings:
            - HostPort: 80
              Protocol: tcp
              ContainerPort: 80

  # ECS Service
  test0122ECSService:
    Type: AWS::ECS::Service
    DependsOn: test0122ALBListener
    Properties:
      Cluster: !Ref test0122EcsCluster
      LaunchType: FARGATE
      DesiredCount: 1
      LoadBalancers:
        - TargetGroupArn: !Ref test0122TargetGroup
          ContainerPort: 80
          ContainerName: !Sub ${SystemName}-Container
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref test0122EcsSecurityGroup
          Subnets:
            - !Ref test0122PrivateSubnet1A
            - !Ref test0122PrivateSubnet1C
      ServiceName: !Sub ${SystemName}-ECS-Service
      TaskDefinition: !Ref test0122ECSTaskDefinition
